AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template for Amazon Personalize recommender system with UI

Parameters:
  PersonalizeCampaignArn:
    Type: String
    Description: The ARN of your Amazon Personalize campaign
  BucketName:
    Type: String
    Description: Name of the S3 bucket to host the website
  UsersDatasetArn:
    Type: String
    Description: The ARN of your Users dataset in Amazon Personalize
  TrackingId:
    Type: String
    Description: The tracking ID for your Amazon Personalize event tracker


Resources:
  # DynamoDB Table
  RecommendationsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: PersonalizeRecommendations
      AttributeDefinitions:
        - AttributeName: UserId
          AttributeType: S
      KeySchema:
        - AttributeName: UserId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  # IAM Roles
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: PersonalizeAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - personalize:GetRecommendations
                  - personalize:PutUsers
                  - personalize:PutEvents
                Resource: '*'
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource: !GetAtt RecommendationsTable.Arn
        - PolicyName: StepFunctionsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - states:StartExecution
                  - states:DescribeExecution
                Resource: '*'
        - PolicyName: LambdaInvokeAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: '*'

  StepFunctionsExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaInvoke
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: '*'

  # Lambda Functions
  InputProcessorFunction:
    Type: AWS::Lambda::Function
    DependsOn: LambdaExecutionRole
    Properties:
      FunctionName: InputProcessor
      Runtime: python3.8
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          def handler(event, context):
              # Process input data
              return {
                  'userId': event['userId'],
                  'requestType': event['requestType'],
                  'selectedProducts': event.get('selectedProducts', []),
                  'metadata': event.get('metadata', {})
              }

  RecommendationFunction:
    Type: AWS::Lambda::Function
    DependsOn: LambdaExecutionRole
    Properties:
      FunctionName: GetRecommendation
      Runtime: python3.8
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import boto3
          import os
          import json
          from datetime import datetime
          import uuid
          def handler(event, context):
              personalize_runtime = boto3.client('personalize-runtime')
              userId = str(uuid.uuid4())
              
              # Handle different request types
              if event['requestType'] == 'products' or event['requestType'] == 'both':
                  # Record user interactions
                  personalize_events = boto3.client('personalize-events')
                  for item in event['selectedProducts']:
                      personalize_events.put_events(
                          trackingId=os.environ['TRACKING_ID'],
                          userId=userId,
                          sessionId='recommender_session',
                          eventList=[{
                              'eventType': 'purchase',
                              'itemId': item,
                              'sentAt': datetime.now().timestamp()
                          }]
                      )
              
              if event['requestType'] == 'metadata' or event['requestType'] == 'both':
                  # Add user to dataset
                  personalize_events = boto3.client('personalize-events')
                  users_dataset_arn = os.environ['USERS_DATASET_ARN']
                  personalize_events.put_users(
                      datasetArn=users_dataset_arn,
                      users=[{
                          'userId': userId,
                          'properties': json.dumps(event['metadata'])
                      }]
                  )
              
              # Get recommendations
              response = personalize_runtime.get_recommendations(
                  campaignArn=os.environ['PERSONALIZE_CAMPAIGN_ARN'],
                  userId=userId
              )
              return response['itemList']
      Environment:
        Variables:
          PERSONALIZE_CAMPAIGN_ARN: !Ref PersonalizeCampaignArn
          TRACKING_ID: !Ref TrackingId
          USERS_DATASET_ARN: !Ref UsersDatasetArn

  WriteToDynamoDBFunction:
    Type: AWS::Lambda::Function
    DependsOn: LambdaExecutionRole
    Properties:
      FunctionName: WriteToDynamoDB
      Runtime: python3.8
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import boto3
          import json
          import os
          from decimal import Decimal

          def float_to_decimal(obj):
              if isinstance(obj, float):
                  return Decimal(str(obj))
              elif isinstance(obj, dict):
                  return {k: float_to_decimal(v) for k, v in obj.items()}
              elif isinstance(obj, list):
                  return [float_to_decimal(v) for v in obj]
              return obj

          def handler(event, context):
              dynamodb = boto3.resource('dynamodb')
              table = dynamodb.Table(os.environ['DYNAMODB_TABLE_NAME'])
              
              # Handle the case where event is a list of recommendations
              if isinstance(event, list):
                  recommendations = event
                  user_id = context.invoked_function_arn.split(':')[-1]  # Use function name as a placeholder user ID
              else:
                  recommendations = event.get('recommendations', [])
                  user_id = event.get('userId', 'unknown')

              # Format the recommendations
              formatted_recommendations = [
                  {
                      'itemId': item['itemId'],
                      'score': float(item['score'])
                  }
                  for item in recommendations
              ]

              # Create the item to be inserted
              item = {
                  'UserId': user_id,
                  'recommendations': formatted_recommendations
              }
              
              # Convert any float values to Decimal
              item = float_to_decimal(item)
              
              # Insert the item into DynamoDB
              table.put_item(Item=item)
              
              return {
                  'statusCode': 200,
                  'body': json.dumps(event)
              }
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref RecommendationsTable

  # Step Functions State Machine
  RecommenderStateMachine:
    Type: AWS::StepFunctions::StateMachine
    DependsOn: 
      - InputProcessorFunction
      - RecommendationFunction
      - WriteToDynamoDBFunction
      - StepFunctionsExecutionRole
    Properties:
      DefinitionString: !Sub
        - |-
          {
            "Comment": "A state machine for generating and storing personalized recommendations",
            "StartAt": "ProcessInput",
            "States": {
              "ProcessInput": {
                "Type": "Task",
                "Resource": "${InputProcessorFunctionArn}",
                "Next": "GetRecommendation"
              },
              "GetRecommendation": {
                "Type": "Task",
                "Resource": "${RecommendationFunctionArn}",
                "Next": "WriteToDynamoDB"
              },
              "WriteToDynamoDB": {
                "Type": "Task",
                "Resource": "${WriteToDynamoDBFunctionArn}",
                "End": true
              }
            }
          }
        - InputProcessorFunctionArn: !GetAtt InputProcessorFunction.Arn
          RecommendationFunctionArn: !GetAtt RecommendationFunction.Arn
          WriteToDynamoDBFunctionArn: !GetAtt WriteToDynamoDBFunction.Arn
      RoleArn: !GetAtt StepFunctionsExecutionRole.Arn

  # API Handler Lambda
  ApiHandlerFunction:
    Type: AWS::Lambda::Function
    DependsOn: 
      - LambdaExecutionRole
      - RecommenderStateMachine
    Properties:
      FunctionName: ApiHandler
      Runtime: python3.8
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 180
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          import time

          def handler(event, context):
              # For preflight OPTIONS request
              if event['httpMethod'] == 'OPTIONS':
                  return {
                      'statusCode': 200,
                      'headers': {
                          'Access-Control-Allow-Origin': '*',
                          'Access-Control-Allow-Headers': 'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token',
                          'Access-Control-Allow-Methods': 'OPTIONS,POST'
                      },
                      'body': json.dumps('OK')
                  }

              # Extract data from the event
              body = json.loads(event['body'])
              
              # Start Step Functions execution
              step_functions = boto3.client('stepfunctions')
              response = step_functions.start_execution(
                  stateMachineArn=os.environ['STEP_FUNCTIONS_ARN'],
                  input=json.dumps(body)
              )

              # Get the execution ARN
              execution_arn = response['executionArn']

              # Wait for the execution to complete (with timeout)
              max_wait_time = 25  # seconds
              start_time = time.time()
              while True:
                  if time.time() - start_time > max_wait_time:
                      return {
                          'statusCode': 504,
                          'body': json.dumps('Execution timed out'),
                          'headers': {
                              'Access-Control-Allow-Origin': '*',
                              'Access-Control-Allow-Headers': 'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token',
                              'Access-Control-Allow-Methods': 'OPTIONS,POST'
                          }
                      }

                  execution = step_functions.describe_execution(executionArn=execution_arn)
                  if execution['status'] == 'SUCCEEDED':
                      # Parse the output
                      output = json.loads(execution['output'])
                      recommendations = output.get('body', '[]')  # Get the body or empty list
                      return {
                          'statusCode': 200,
                          'body': recommendations,
                          'headers': {
                              'Access-Control-Allow-Origin': '*',
                              'Access-Control-Allow-Headers': 'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token',
                              'Access-Control-Allow-Methods': 'OPTIONS,POST'
                          }
                      }
                  elif execution['status'] in ['FAILED', 'TIMED_OUT', 'ABORTED']:
                      return {
                          'statusCode': 500,
                          'body': json.dumps('Execution failed'),
                          'headers': {
                              'Access-Control-Allow-Origin': '*',
                              'Access-Control-Allow-Headers': 'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token',
                              'Access-Control-Allow-Methods': 'OPTIONS,POST'
                          }
                      }
                  
                  time.sleep(0.5)  # Wait for 500ms before checking again
      Environment:
        Variables:
          STEP_FUNCTIONS_ARN: !Ref RecommenderStateMachine

  # API Gateway
  RecommenderApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: RecommenderApi
      Description: API for the recommender system
      EndpointConfiguration:
        Types:
          - REGIONAL

  ApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RecommenderApi
      ParentId: !GetAtt RecommenderApi.RootResourceId
      PathPart: 'recommend'

  ApiMethod:
    Type: AWS::ApiGateway::Method
    DependsOn: ApiHandlerFunction
    Properties:
      RestApiId: !Ref RecommenderApi
      ResourceId: !Ref ApiResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
          - LambdaArn: !GetAtt ApiHandlerFunction.Arn

  # Add OPTIONS method for CORS
  ApiCorsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      ResourceId: !Ref ApiResource
      RestApiId: !Ref RecommenderApi
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          ResponseModels:
            application/json: 'Empty'

  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: 
      - ApiMethod
      - ApiCorsMethod
    Properties:
      RestApiId: !Ref RecommenderApi
      StageName: prod

  # S3 Bucket for Website Hosting
  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      OwnershipControls:
        Rules:
          - ObjectOwnership: ObjectWriter
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - HEAD
            AllowedOrigins:
              - '*'
            MaxAge: 3000

  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: s3:GetObject
            Resource: !Join ['', ['arn:aws:s3:::', !Ref WebsiteBucket, '/*']]

  # Allow API Gateway to invoke Lambda
  ApiGatewayInvokeLambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn: ApiHandlerFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt ApiHandlerFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RecommenderApi}/*/POST/recommend

Outputs:
  WebsiteURL:
    Value: !GetAtt WebsiteBucket.WebsiteURL
    Description: URL for website hosted on S3
  ApiUrl:
    Description: URL of the API endpoint
    Value: !Sub https://${RecommenderApi}.execute-api.${AWS::Region}.amazonaws.com/prod/recommend